import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";

import fs from "fs"; // –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TXT
// import { PDFDocument } from 'pdf-lib'; // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF
import Epub from "epub"; // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å EPUB
import fb2 from "node-fb2"; // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å FB2

import { sendDataAboutButton } from "./tgterminal.js";
import { sendDataAboutError } from "./tgterminal.js";
import { sendDataAboutText } from "./tgterminal.js";

import { searchBooks } from "./search.js";

import { config } from "./config.js";

const TOKEN = config.TOKENs[0]; // 1 - –æ—Ä–∏–≥–∏–Ω–∞–ª
const bot = new TelegramBot(TOKEN, { polling: true });

// digfusion

const qu1z3xId = "923690530";
const jackId = "6815420098";
let BotName = "diglibrarybot";

let usersData = [];

bot.setMyCommands([
	{
		command: "/menu",
		description: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìö",
	},
	{
		command: "/help",
		description: "–ü–æ–º–æ—â—å‚ùî",
	},
	{
		command: "/settings",
		description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è",
	},
	{
		command: "/restart",
		description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è",
	},
]);

let textToSayHello, match;

async function firstMeeting(chatId, numOfStage = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = `firstMeeting${numOfStage}`;

		switch (numOfStage) {
			case 1:
				await bot
					.sendMessage(chatId, "„Ö§")
					.then(
						(message) =>
							(dataAboutUser.messageId = message.message_id)
					);

				await bot.editMessageText(
					`<b>${dataAboutUser.login}, –ø—Ä–∏–≤–µ—Ç! üëã</b>\n\n–°–º–æ—Ç—Ä–∏, <b>–≤—Å–µ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ!</b>\n<blockquote>–ö–∞–∫ –Ω–∞–¥—É–º–∞–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å, –ø–∏—à–∏ –º–Ω–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è,</b> —è –≤—ã–¥–∞–º <b>—Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b></blockquote>\n\n<b>–ï—Å–ª–∏ –∑–∞–±–ª—É–¥–∏—à—å—Å—è, –ø–∏—à–∏ /help </b>üòâ`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find(
							(obj) => obj.chatId == chatId
						).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "",
										callback_data: "-",
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function menuHome(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "menuHome";

		dataAboutUser.foundBooks = null;

		let dataAboutBook = dataAboutUser.currentBookId
			? dataAboutUser.myLibrary.find(
					(obj) => obj.bookId == dataAboutUser.currentBookId
			  )
			: null;

		const dateNowHHNN =
			new Date().getHours() * 100 + new Date().getMinutes();
		if (dateNowHHNN < 1200 && dateNowHHNN >= 600)
			textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
		else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200)
			textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
		else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700)
			textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
		else if (dateNowHHNN >= 2200 || dateNowHHNN < 600)
			textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

		await bot.editMessageText(
			`<b>${textToSayHello}, ${dataAboutUser.login}! üëã</b>\n<blockquote><b>–ù–∞–ø–æ–º–∏–Ω–∞—é,</b> –∑–∞—Ö–æ—á–µ—à—å —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è!</blockquote>\n<b>–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId)
					.messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ üîé`,
								callback_data: `search`,
							},
						],
						[
							{
								text: dataAboutBook
									? `${truncateString(
											dataAboutBook.title,
											20
									  )} ( ${dataAboutBook.currentPage} / ${
											dataAboutBook.pages.length
									  } ) ‚û°Ô∏è`
									: ``,
								callback_data: dataAboutBook
									? `readBookWithId${dataAboutBook.bookId}`
									: `-`,
							},
						],
						[
							{
								text: `–ß–∞—Ä—Ç—ã üî•`,
								callback_data: `soon`,
							},
							{
								text: `–ú–æ–∏ –∫–Ω–∏–≥–∏ üìö`,
								callback_data: `soon`,
							},
						],
						[
							{
								text: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è`,
								callback_data: `settings`,
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function textCropping(text, charsPerPage = 200) {
	try {
		const words = text.match(/\S+\s*/g); // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
		const pages = [];
		let currentPage = "";
		let currentLength = 0;

		for (let i = 0; i < words.length; i++) {
			const word = words[i];

			// –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
			if (currentLength + word.length > charsPerPage) {
				pages.push(currentPage.trim()); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
				currentPage = ""; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
				currentLength = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
			}

			currentPage += word; // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
			currentLength += word.length; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç
		if (currentPage.length > 0) {
			pages.push(currentPage.trim());
		}

		return pages;
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

function truncateString(text, maxLength) {
	if (text && text.length > maxLength) {
		return text.substring(0, maxLength - 3) + "..";
	}
	return text;
}

async function search(chatId, dataAboutBook = null, query = null) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		if (query) {
			dataAboutUser.userAction = `search1`;

			if (!dataAboutUser.foundBooks) {
				await bot.editMessageText(
					`<b>–ò—â—É –∫–Ω–∏–≥–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É <i>"${query}"</i> üîé</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find(
							(obj) => obj.chatId == chatId
						).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫ ‚úñÔ∏è`,
										callback_data: "exit",
									},
								],
							],
						},
					}
				);

				dataAboutUser.foundBooks =
					dataAboutUser.foundBooks && query == `;8|digfusion|5*`
						? dataAboutUser.foundBooks
						: await searchBooks(query, dataAboutUser);
			}

			// setTimeout(
			// () => {
			if (dataAboutUser.userAction == "search1") {
				if (dataAboutUser.foundBooks) {
					let buttons = [];
					for (let i = 0; i < dataAboutUser.foundBooks.length; i++) {
						buttons.push([
							{
								text: `${truncateString(
									dataAboutUser.foundBooks[i].title,
									20
								)}`,
								callback_data: `moreAboutBookWithId${dataAboutUser.foundBooks[i].bookId}`,
							},
						]);
					}
					buttons.push([
						{
							text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`,
							callback_data: `exit`,
						},
						{
							text: `–ü–æ–º–æ—â—å‚ùî`,
							callback_data: `help`,
						},
					]);

					bot.editMessageText(
						`<b>–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É <i>"${query}"</i></b> üòâ\n\n<a href="https://t.me/digfusionsupport">–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ</a>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find(
								(obj) => obj.chatId == chatId
							).messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: buttons,
							},
						}
					);
				} else {
					bot.editMessageText(
						`<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ —Ç–µ–±–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É <i>"${query}"</i> üòî</b>\n\n<blockquote><b>–°–æ–≤–µ—Ç:</b> –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –∞–≤—Ç–æ—Ä–∞.</blockquote>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find(
								(obj) => obj.chatId == chatId
							).messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: `‚¨ÖÔ∏è–í –º–µ–Ω—é`,
											callback_data: "exit",
										},
									],
								],
							},
						}
					);
				}
			}
			// },}
			// 	dataAboutUser.foundBooks ? 0 : 2000
			// );
		} else if (dataAboutBook) {
			dataAboutUser.userAction = `search2`;

			await bot.editMessageText(
				`<b>üìï <i>"${dataAboutBook.title}"</i> - ${
					dataAboutBook.author
				}</b>\n\n–î–∞—Ç–∞: <b>${
					dataAboutBook.date
				}</b>\n–ñ–∞–Ω—Ä: <b>–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è</b>\n<blockquote><b>–û—Ç—Ä—ã–≤–æ–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:</b>\n<i>${truncateString(
					dataAboutBook.text,
					100
				)}</i></blockquote>\n\n<b>${
					dataAboutBook.currentPage > 1
						? `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∏—Ç–∞—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É? üòÉ`
						: `–ë—É–¥–µ–º —á–∏—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ? üòÉ`
				}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text:
										dataAboutBook.currentPage > 1
											? `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ( –Ω–∞ ${dataAboutBook.currentPage}—Å—Ç—Ä ) ‚úÖ`
											: `–ù–∞—á–∞—Ç—å —á–∏—Ç–∞—Ç—å ‚úÖ`,
									callback_data: `readBookWithId${dataAboutBook.bookId}`,
								},
							],
							[
								{ text: `–°–∫–∞—á–∞—Ç—å üìÅ`, callback_data: `soon` },
								{
									text: ` ${
										dataAboutUser.myLibrary.find(
											(obj) =>
												obj.bookId ==
												dataAboutBook.bookId
										)
											? `–ò–∑ –º–æ–∏—Ö –∫–Ω–∏–≥ ‚úñÔ∏è`
											: `–í –º–æ–∏ –∫–Ω–∏–≥–∏ üìå`
									}`,
									callback_data: `soon`,
								},
							],
							[
								{
									text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`,
									callback_data: dataAboutUser.foundBooks
										? `search1`
										: `myLibrary`,
								},
							],
						],
					},
				}
			);
		} else {
			let text = "";
			let lastSearchedRequests = dataAboutUser.statistics.searchHistory
				? dataAboutUser.statistics.searchHistory.slice(-3)
				: null;

			lastSearchedRequests.forEach((obj) => {
				text += `\n<i><a href="https://t.me/${BotName}/?start=searchBy${
					obj.request
				}">- ${truncateString(obj.request, 17)}</a></i>`;
			});

			await bot.editMessageText(
				`<b>–û—Ç–ª–∏—á–Ω–æ,</b> –¥–∞–≤–∞–π –ø–æ–∏—â–µ–º –¥–ª—è —Ç–µ–±—è –ø–æ—ç–º—É, —Ä–æ–º–∞–Ω, –ø–æ–≤–µ.. <b>–î–∞ –≤—Å–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ! üîé</b>\n${
					text
						? `<blockquote><b>–ò—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑:</b>${text}</blockquote>`
						: `\n`
				}<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!</b> üòâ`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `exit` },
								{ text: `–ß–∞—Ä—Ç—ã üî•`, callback_data: `soon` },
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function reader(chatId, dataAboutBook = null, showSettings = false) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "reader";

		let buttons = null;

		if (showSettings)
			buttons = [
				[
					{
						text: `–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${
							dataAboutUser.settings.charsPerPage
						} ${
							(dataAboutUser.settings.charsPerPage >= 5 &&
								dataAboutUser.settings.charsPerPage <= 20) ||
							(dataAboutUser.settings.charsPerPage % 10 >= 5 &&
								dataAboutUser.settings.charsPerPage % 10 <=
									9) ||
							dataAboutUser.settings.charsPerPage % 10 == 0
								? "–±—É–∫–≤"
								: `${
										dataAboutUser.settings.charsPerPage %
											10 ==
										1
											? "–±—É–∫–≤–∞"
											: `${
													dataAboutUser.settings
														.charsPerPage %
														10 >=
														2 &&
													dataAboutUser.settings
														.charsPerPage %
														10 <=
														4
														? "–±—É–∫–≤—ã"
														: ``
											  }`
								  }`
						}`,
						callback_data: `-`,
					},
				],
				[
					{
						text:
							dataAboutUser.settings.charsPerPage > 100
								? `‚ûñ`
								: `üö´`,
						callback_data:
							dataAboutUser.settings.charsPerPage > 100
								? "cutCharsOnPage"
								: `-`,
					},
					{
						text: "Aa",
						callback_data: `-`,
					},
					{
						text:
							dataAboutUser.settings.charsPerPage < 800
								? `‚ûï`
								: `üö´`,
						callback_data:
							dataAboutUser.settings.charsPerPage < 800
								? "addCharsOnPage"
								: `-`,
					},
				],
				[
					{
						text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å",
						callback_data: `readBookWithId${dataAboutBook.bookId}`,
					},
				],
			];
		else {
			buttons = [
				[
					{
						text: dataAboutBook.currentPage == 1 ? `üö´` : `‚Ü©Ô∏è`,
						callback_data:
							dataAboutBook.currentPage == 1
								? `-`
								: "previousPage",
					},
					{
						text: `${dataAboutBook.currentPage} –∏–∑ ${dataAboutBook.pages.length}`,
						callback_data: "-",
					},
					{
						text:
							dataAboutBook.currentPage ==
							dataAboutBook.pages.length
								? `üö´`
								: `‚Ü™Ô∏è`,
						callback_data:
							dataAboutBook.currentPage ==
							dataAboutBook.pages.length
								? `-`
								: "nextPage",
					},
				],
				[
					{
						text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
						callback_data: dataAboutUser.foundBooks
							? `moreAboutBookWithId${dataAboutUser.currentBookId}`
							: `myLibrary`,
					},
					{
						text: "–ü—Ä–æ—á–µ–µ‚öôÔ∏è",
						callback_data: "readerSettings",
					},
				],
			];
		}

		if (dataAboutBook) {
			let pagesLeft =
				dataAboutBook.pages.length - dataAboutBook.currentPage;

			await bot.editMessageText(
				`<b><i>"${dataAboutBook.title}"</i> - ${
					dataAboutBook.author
				}</b><blockquote>${
					dataAboutBook.pages[dataAboutBook.currentPage - 1]
				}</blockquote>\n<i>${
					pagesLeft == 0
						? `–û—Å—Ç–∞–ª–∞—Å—å <b>–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</b>`
						: `–î–æ –∫–æ–Ω—Ü–∞ <b>${pagesLeft} ${
								(pagesLeft >= 5 && pagesLeft <= 20) ||
								(pagesLeft % 10 >= 5 && pagesLeft % 10 <= 9) ||
								pagesLeft % 10 == 0
									? "—Å—Ç—Ä–∞–Ω–∏—Ü"
									: `${
											pagesLeft % 10 == 1
												? "—Å—Ç—Ä–∞–Ω–∏—Ü–∞"
												: `${
														pagesLeft % 10 >= 2 &&
														pagesLeft % 10 <= 4
															? "—Å—Ç—Ä–∞–Ω–∏—Ü—ã"
															: ``
												  }`
									  }`
						  }</b>`
				}</i>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: buttons,
					},
				}
			);
		} else {
			await bot.editMessageText(
				`<b>–ü–æ—Ö–æ–¥—É, —è –ø–æ—Ç–µ—Ä—è–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–π –∫–Ω–∏–≥–µ.. üò¢\n\n–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∏—Å–∫ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –µ–µ –≤ —Å–≤–æ–∏—Ö –∫–Ω–∏–≥–∞—Ö! üòâ</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [[{ text: ``, callback_data: `-` }]],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function myLibrary(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "myLibrary";

		let text = "";

		await bot.editMessageText(
			`<b><i>üìö –ú–æ–∏ –∫–Ω–∏–≥–∏${
				dataAboutUser.myLibrary
					? ` ‚Ä¢ ${dataAboutUser.myLibrary.length}—à—Ç`
					: ``
			} üìå</i></b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId)
					.messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `exit` }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function calculateReadingLevel(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		return dataAboutUser.statistics.finishedBooksCount <= 1
			? "–ù–∞—á–∏–Ω–∞—é—â–∏–π üôÇ"
			: dataAboutUser.statistics.finishedBooksCount <= 3
			? "–ö–Ω–∏–≥–æ–ª—é–± üìö"
			: dataAboutUser.statistics.finishedBooksCount <= 6
			? "–ß–∏—Ç–∞–∫ üß†"
			: dataAboutUser.statistics.finishedBooksCount <= 10
			? "–ö–Ω–∏–≥–æ–µ–¥ üçΩÔ∏è"
			: dataAboutUser.statistics.finishedBooksCount <= 20
			? "–ö–Ω–∏–≥–æ–∑–∞–≤—Ä ü¶ñ"
			: dataAboutUser.statistics.finishedBooksCount <= 50
			? "–ì—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü üëë"
			: "–°–∞–º –∫–∞–∫ –∫–Ω–∏–≥–∞ ü§Ø";
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function settings(
	chatId,
	editLogin = false,
	afterEdit = false,
	readingLevelScale = false
) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		if (!editLogin && !readingLevelScale) {
			dataAboutUser.userAction = "settings";

			await bot.editMessageText(
				`<b><i>üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Ä¢ <code>${
					dataAboutUser.chatId
				}</code> ‚öôÔ∏è</i>\n\n–î–∞–Ω–Ω—ã–µ:\n</b>–õ–æ–≥–∏–Ω: <b>${
					dataAboutUser.login
				}</b> - <a href="https://t.me/${BotName}/?start=editLogin">–∏–∑–º–µ–Ω–∏—Ç—å</a>\n–†–∞–Ω–≥: <b>${await calculateReadingLevel(
					chatId
				)} - <a href="https://t.me/${BotName}/?start=moreAboutReadingLevel">–ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n–õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä: <b>${"–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è"}</b>\n–ü—Ä–æ—á–∏—Ç–∞–Ω–æ: <b>${
					dataAboutUser.finishedBooksCount
				}</b> ${
					dataAboutUser.settings.booksGoal
						? `<b>${
								(dataAboutUser.finishedBooksCount >= 5 &&
									dataAboutUser.finishedBooksCount <= 20) ||
								(dataAboutUser.finishedBooksCount % 10 >= 5 &&
									dataAboutUser.finishedBooksCount % 10 <=
										9) ||
								dataAboutUser.finishedBooksCount % 10 == 0
									? "–∫–Ω–∏–≥"
									: `${
											dataAboutUser.finishedBooksCount %
												10 ==
											1
												? "–∫–Ω–∏–≥–∞"
												: `${
														dataAboutUser.finishedBooksCount %
															10 >=
															2 &&
														dataAboutUser.finishedBooksCount %
															10 <=
															4
															? "–∫–Ω–∏–≥–∏"
															: ``
												  }`
									  }`
						  }</b> - <a href="https://t.me/${BotName}/?start=soon">–∑–∞–¥–∞—Ç—å —Ü–µ–ª—å</a>`
						: ``
				}\n\n<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–º–µ—â–∞–µ—Ç: <b>${
					dataAboutUser.settings.charsPerPage
				} ${
					(dataAboutUser.settings.charsPerPage >= 5 &&
						dataAboutUser.settings.charsPerPage <= 20) ||
					(dataAboutUser.settings.charsPerPage % 10 >= 5 &&
						dataAboutUser.settings.charsPerPage % 10 <= 9) ||
					dataAboutUser.settings.charsPerPage % 10 == 0
						? "–±—É–∫–≤"
						: `${
								dataAboutUser.settings.charsPerPage % 10 == 1
									? "–±—É–∫–≤—É"
									: `${
											dataAboutUser.settings
												.charsPerPage %
												10 >=
												2 &&
											dataAboutUser.settings
												.charsPerPage %
												10 <=
												4
												? "–±—É–∫–≤—ã"
												: ``
									  }`
						  }`
				}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `exit` },
								{
									text: "digfusion‚ùî",
									callback_data: "digfusionInfo",
								},
							],
						],
					},
				}
			);
		} else if (editLogin) {
			dataAboutUser.userAction = "editLogin";

			await bot.editMessageText(
				`<i><b>üõ†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ ‚öôÔ∏è\n\n</b>–õ–æ–≥–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üîí</i><b>\n\n${
					afterEdit
						? `–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π: <code>${dataAboutUser.supportiveCount}</code>`
						: `–¢–µ–∫—É—â–∏–π: <code>${dataAboutUser.login}</code>`
				}${
					afterEdit
						? "\n\n–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞? ü§î"
						: "\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚úçÔ∏è"
				}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `${
										dataAboutUser.login !=
										dataAboutUser.telegramFirstName
											? "–°–±—Ä–æ—Å–∏—Ç—å‚ùå"
											: ""
									}`,
									callback_data: "resetLogin",
								},
							],
							[
								{
									text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`,
									callback_data: "settings",
								},
								{
									text: `${afterEdit ? "–ü—Ä–∏–Ω—è—Ç—å‚úÖ" : ""}`,
									callback_data: "editLogin",
								},
							],
						],
					},
				}
			);
		} else if (readingLevelScale) {
			dataAboutUser.userAction = "readingLevelScale";

			await bot.editMessageText(
				`<b><i>ü§ì –ß–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–Ω–≥ üéñÔ∏è</i>\n\n–£ –º–µ–Ω—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —Ç–≤–æ–µ–π –Ω–∞—á–∏—Ç–∞–Ω–Ω–æ—Å—Ç–∏!\n\n–û–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:</b><blockquote></blockquote>\n\n–¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: <b>${await calculateReadingLevel(
					chatId
				)}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `settings` }],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function digfusionInfo(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		await bot.editMessageText(
			`<b><i>‚ùîdigfusion ‚Ä¢ –û –Ω–∞—Å üíÅüèª‚Äç‚ôÇÔ∏è</i></b>\n\n<i>–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ <b>digfusion</b> —Å –¥—É—à–æ–π ü§ç</i>\n\n<b><i>digfusion</i></b> - <b>–Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å—Ç–∞—Ä—Ç–∞–ø,</b> —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π <b>—Å–≤–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b> –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—Å–ª—É–≥–∏ –ø–æ <b>—Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤</b> —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤! ‚òëÔ∏è\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ <b>–Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã, –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b> –∏ <b>–ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏</b> –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º <b>Telegram –∫–∞–Ω–∞–ª–µ</b> –∏ <b>–±–æ—Ç–µ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ! ü§ó\n\n<a href="https://t.me/digfusion">digfusion | –∏–Ω—Ñ–æ</a> ‚Ä¢ <a href="https://t.me/digfusionbot">digfusion | —É—Å–ª—É–≥–∏</a></b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId)
					.messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ù–∞—à Telegram –∫–∞–Ω–∞–ª üì£",
								url: "https://t.me/digfusion",
							},
						],
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "settings" },
							{
								text: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠",
								url: "https://t.me/digfusionsupport",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function StartAll() {
	if (TOKEN == config.TOKENs[0]) {
		BotName = "digtestingbot";
	} else if (TOKEN == config.TOKENs[1]) {
		BotName = "diglibrarybot";
	}

	// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
	const supportedTypes = [
		"text/plain",
		"application/pdf",
		"application/epub+zip",
		"application/x-fictionbook+xml",
	];

	// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	// bot.on("message", async (message) => {
	// 	const chatId = message.chat.id;

	// 	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	// 	if (message.document) {
	// 		const fileId = message.document.file_id;
	// 		const mimeType = message.document.mime_type;

	// 		console.log(mimeType);

	// 		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
	// 		if (supportedTypes.includes(mimeType)) {
	// 			// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª

	// 			const filePath = await bot.downloadFile(fileId, "./downloads");
	// 			console.log("–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –ø—É—Ç–∏:", filePath);

	// 			let title = null,
	// 				author = null,
	// 				text = null;

	// 			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
	// 			if (mimeType == "text/plain") {
	// 				text = fs.readFileSync(filePath, "utf8");

	// 				// –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞
	// 			} else if (mimeType == "application/pdf") {
	// 				// –û–±—Ä–∞–±–æ—Ç–∫–∞ EPUB —Ñ–∞–π–ª–∞
	// 			} else if (mimeType == "application/epub+zip") {
	// 				const epub = new Epub(filePath);
	// 				epub.on("end", function () {
	// 					epub.getChapter("1", (err, fileText) => {
	// 						if (!err) {
	// 							text = fileText;
	// 							title = epub.metadata.title || null;
	// 							author = epub.metadata.creator || null;
	// 						}
	// 					});
	// 				});
	// 				epub.parse();

	// 				// –û–±—Ä–∞–±–æ—Ç–∫–∞ FB2 —Ñ–∞–π–ª–∞
	// 			} else if (mimeType == "application/x-fictionbook+xml") {
	// 				const fb2Data = fs.readFileSync(filePath, "utf8");
	// 				const parsed = fb2.parse(fb2Data);

	// 				// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	// 				text = parsed.body;
	// 				title = parsed.description.title || null;
	// 				author = parsed.description.author
	// 					? `${parsed.description.author.firstName} ${parsed.description.author.lastName}`
	// 					: null;
	// 			}

	// 			dataAboutUser.supportveCount.push({
	// 				title: title,
	// 				author: author,
	// 				date: null,
	// 				text: text,
	// 				bookId: 88460,
	// 				pages: null,
	// 				currentPage: 1,
	// 			});

	// 			search(chatId, dataAboutUser.supportveCount);
	// 		} else {
	// 			console.log("–≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ–ª—å–∑—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç.");
	// 		}
	// 	}
	// });

	bot.on("text", async (message) => {
		const chatId = message.chat.id;
		const text = message.text;

		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		try {
			if (!usersData.find((obj) => obj.chatId == chatId)) {
				usersData.push({
					chatId: chatId,
					login: message.from.first_name,
					messageId: null,
					userAction: null,
					supportveCount: null,

					currentBookId: null,

					myLibrary: [], // –º–æ—è –º–µ–¥–∏–∞—Ç–µ–∫–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ "–º–æ–∏ –∫–Ω–∏–≥–∏", –Ω–∞—á–∞—Ç—ã–µ –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏)
					foundBooks: [], // –∫–Ω–∏–≥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –ø–æ–∏—Å–∫–µ

					settings: {
						charsPerPage: 300,
						booksCountGoal: null,
						notifications: true,
					},
					statistics: {
						searchHistory: [],
						finishedBooksCount: 0,
					},
				});
			}

			const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

			if (
				Array.from(text)[0] != "/" &&
				dataAboutUser.userAction != "editLogin"
			) {
				dataAboutUser.foundBooks = null;

				dataAboutUser.statistics.searchHistory.push({
					request: text,
					date: new Date(),
				});

				await search(chatId, null, text);
			}

			if (text.includes("/start searchBy")) {
				match = text.match(/^\/start searchBy(.*)$/);

				await search(chatId, null, match[1]);
			}

			if (dataAboutUser) {
				switch (text) {
					case "/restart":
						if (chatId == qu1z3xId || chatId == jackId) {
							await bot
								.sendMessage(chatId, "„Ö§")
								.then(
									(message) =>
										(dataAboutUser.messageId =
											message.message_id)
								);

							menuHome(chatId);
							break;
						}
					case "/start":
						firstMeeting(chatId);
						break;
					case "/menu":
						try {
							bot.deleteMessage(chatId, dataAboutUser.messageId);
						} catch (error) {}

						await bot
							.sendMessage(chatId, "„Ö§")
							.then(
								(message) =>
									(dataAboutUser.messageId =
										message.message_id)
							);

						menuHome(chatId);
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "/help":
						// helpList(chatId)
						break;
					case "/settings":
						settings(chatId);
						break;
					case "":
						break;
				}
			}
			bot.deleteMessage(chatId, message.message_id);
			if (chatId != jackId && chatId != qu1z3xId) {
				sendDataAboutText(
					dataAboutUser.login,
					message.from.username,
					chatId,
					text
				);
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	});

	bot.on("callback_query", async (query) => {
		const chatId = query.message.chat.id;
		const data = query.data;
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		try {
			if (dataAboutUser) {
				if (data.includes("readBookWithId")) {
					match = data.match(/^readBookWithId(.*)$/);

					let dataAboutBook = dataAboutUser.foundBooks
						? dataAboutUser.foundBooks.find(
								(obj) => obj.bookId == match[1]
						  )
						: dataAboutUser.myLibrary.find(
								(obj) => obj.bookId == match[1]
						  );

					dataAboutBook.pages = await textCropping(
						dataAboutBook.text,
						dataAboutUser.settings.charsPerPage
					);

					dataAboutUser.myLibrary.push(dataAboutBook);

					dataAboutUser.currentBookId = match[1];

					reader(chatId, dataAboutBook);
				}

				if (data.includes("moreAboutBookWithId")) {
					match = data.match(/^moreAboutBookWithId(.*)$/);

					search(
						chatId,
						dataAboutUser.foundBooks.find(
							(obj) => obj.bookId == match[1]
						)
					);
				}

				if (
					data.includes("previousPage") ||
					data.includes("nextPage") ||
					data.includes("firstPage")
				) {
					match = data.match(/^(.*)Page$/);

					if (match[1] == "next") {
						if (dataAboutUser.userAction == "reader") {
							let dataAboutBook = dataAboutUser.myLibrary.find(
								(obj) =>
									obj.bookId == dataAboutUser.currentBookId
							);

							if (
								dataAboutBook.currentPage !=
								dataAboutBook.pages.length
							)
								++dataAboutBook.currentPage;

							reader(chatId, dataAboutBook);
						}
					} else if (match[1] == "previous") {
						if (dataAboutUser.userAction == "reader") {
							let dataAboutBook = dataAboutUser.myLibrary.find(
								(obj) =>
									obj.bookId == dataAboutUser.currentBookId
							);

							if (dataAboutBook.currentPage > 1)
								--dataAboutBook.currentPage;

							reader(chatId, dataAboutBook);
						}
					} else if (match[1] == "first") {
					}
				}

				if (data.includes("CharsOnPage")) {
					match = data.match(/^(.*)CharsOnPage$/);

					let dataAboutBook = dataAboutUser.myLibrary.find(
						(obj) => obj.bookId == dataAboutUser.currentBookId
					);

					if (
						match[1] == "add" &&
						dataAboutUser.settings.charsPerPage < 800
					) {
						dataAboutUser.settings.charsPerPage += 100;
					}

					if (
						match[1] == "cut" &&
						dataAboutUser.settings.charsPerPage > 100
					) {
						dataAboutUser.settings.charsPerPage -= 100;
					}

					dataAboutBook.pages = await textCropping(
						dataAboutBook.text,
						dataAboutUser.settings.charsPerPage
					);

					reader(chatId, dataAboutBook, true);
				}

				switch (data) {
					case "exit":
						menuHome(chatId);
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "search":
						search(chatId);
						break;
					case "search1":
						search(chatId, null, ";8|digfusion|5*");
						break;
					case "readerSettings":
						reader(
							chatId,
							dataAboutUser.myLibrary.find(
								(obj) =>
									obj.bookId == dataAboutUser.currentBookId
							),
							true
						);
						break;
					case "myLibrary":
						myLibrary(chatId);
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "settings":
						settings(chatId);
						break;
					case "resetLogin":
						dataAboutUser.login = dataAboutUser.telegramFirstName;

						bot.answerCallbackQuery(query.id, {
							text: `–í–∞—à –ª–æ–≥–∏–Ω —Å–Ω–æ–≤–∞ \n¬´${dataAboutUser.login}¬ª üòâ`,
							show_alert: true,
						});

						settings(chatId);
						break;
					case "editLogin":
						dataAboutUser.login = dataAboutUser.supportiveCount;

						bot.answerCallbackQuery(query.id, {
							text: `–í–∞—à –ª–æ–≥–∏–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞\n¬´${dataAboutUser.supportiveCount}¬ª üòâ`,
							show_alert: true,
						});

						settings(chatId);
						break;
					case "digfusionInfo":
						digfusionInfo(chatId);
						break;
					case "soon":
						bot.editMessageText(
							`<b>–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ–∫–∞ –≤ —Ä–∞–Ω–Ω–µ–º –¥–æ—Å—Ç—É–ø–µ.. ü´§</b>\n\n<i>–Ø —Ü–µ–Ω—é —Ç–≤–æ—ë —Å–∏–ª—å–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª!</i>\n\n<b>–ù–æ –æ–Ω –µ—â–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤.. ‚òπÔ∏è</b>`,
							{
								parse_mode: "html",
								chat_id: chatId,
								message_id: usersData.find(
									(obj) => obj.chatId == chatId
								).messageId,
								disable_web_page_preview: true,
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
												callback_data: "exit",
											},
										],
									],
								},
							}
						);
						break;
					case "deleteexcess":
						try {
							bot.deleteMessage(chatId, query.message.message_id);
						} catch (error) {}
						break;
				}
			}
			if (chatId != qu1z3xId && chatId != jackId) {
				sendDataAboutButton(
					dataAboutUser.login,
					query.from.username,
					chatId,
					data
				);
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	});
}

StartAll();

// digfusion
