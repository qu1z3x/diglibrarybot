import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";

import { sendDataAboutButton } from "./tgterminal.js";
import { sendDataAboutError } from "./tgterminal.js";
import { sendDataAboutText } from "./tgterminal.js";

import { searchBooks } from "./search.js";

import { config } from "./config.js";

const TOKEN = config.TOKENs[0]; // 1 - –æ—Ä–∏–≥–∏–Ω–∞–ª
const bot = new TelegramBot(TOKEN, { polling: true });

// digfusion

const qu1z3xId = "923690530";
const jackId = "6815420098";
let BotName = "diglibrarybot";

let usersData = [];

bot.setMyCommands([
	{
		command: "/menu",
		description: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìö",
	},
	{
		command: "/help",
		description: "–≠—Ç–æ –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª—Å—è‚ùî",
	},
	{
		command: "/settings",
		description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è",
	},
	{
		command: "/restart",
		description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è",
	},
]);

let textToSayHello;

async function firstMeeting(chatId, numOfStage = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = `firstMeeting${numOfStage}`;

		switch (numOfStage) {
			case 1:
				await bot
					.sendMessage(chatId, "„Ö§")
					.then(
						(message) => (dataAboutUser.messageId = message.message_id)
					);

				await bot.editMessageText(
					`<b>${dataAboutUser.login}, –ø—Ä–∏–≤–µ—Ç! üëã</b>\n\n–Ø –°–º–æ—Ç—Ä–∏, <b>–≤—Å–µ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ!</b>\n<blockquote>–ö–∞–∫ –Ω–∞–¥—É–º–∞–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å, –ø–∏—à–∏ –º–Ω–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è,</b> —è –≤—ã–¥–∞–º <b>—Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b></blockquote>\n\n<b>–ï—Å–ª–∏ –∑–∞–±–ª—É–¥–∏—à—å—Å—è, –ø–∏—à–∏ /help </b>üòâ`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "",
										callback_data: "-",
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function menuHome(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "menuHome";

		const dateNowHHNN = new Date().getHours() * 100 + new Date().getMinutes();
		if (dateNowHHNN < 1200 && dateNowHHNN >= 600)
			textToSayHello = "–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞";
		else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200)
			textToSayHello = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è";
		else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700)
			textToSayHello = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞";
		else if (dateNowHHNN >= 2200 || dateNowHHNN < 600)
			textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

		await bot.editMessageText(
			`<b>${textToSayHello}, ${dataAboutUser.login}! üëã</b>\n\n<blockquote><b>–ù–∞–ø–æ–º–∏–Ω–∞—é,</b> –∑–∞—Ö–æ—á–µ—à—å —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è!</blockquote>\n<b>–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ üîé`,
								callback_data: `search0`,
							},
						],
						[
							{
								text: `–ß–∞—Ä—Ç—ã üî•`,
								callback_data: `-`,
							},
							{
								text: `–¢–≤–æ–∏ –∫–Ω–∏–≥–∏ üìö`,
								callback_data: `-`,
							},
						],
						[
							{
								text: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è`,
								callback_data: `settings`,
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

function textCropping(text, charsPerPage = 200) {
	try {
		const words = text.match(/\S+\s*/g); // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
		const pages = [];
		let currentPage = "";
		let currentLength = 0;

		for (let i = 0; i < words.length; i++) {
			const word = words[i];

			// –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
			if (currentLength + word.length > charsPerPage) {
				pages.push(currentPage.trim()); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
				currentPage = ""; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
				currentLength = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
			}

			currentPage += word; // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
			currentLength += word.length; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç
		if (currentPage.length > 0) {
			pages.push(currentPage.trim());
		}

		return pages;
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function search(chatId, stageNum = 1, query = null) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		if (query) stageNum = 1;

		dataAboutUser.userAction = `search${stageNum}`;

		switch (stageNum) {
			case 0:
				break;
			case 1:
				await bot.editMessageText(
					`<b>–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É <i>"${query}"</i> ü§î</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫ ‚úñÔ∏è`,
										callback_data: "exit",
									},
								],
							],
						},
					}
				);

				let books = await searchBooks(query);

				setTimeout(() => {
					if (dataAboutUser.userAction == "search1") {
						if (books && books.length) {
							let buttons = [];
							for (let i = 0; i < books.length; i++) {
								buttons.push([
									{
										text: `${books[i].title}`,
										callback_data: `readBookWithId${books[i].id}`,
									},
								]);
							}
							buttons.push([
								{
									text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`,
									callback_data: `exit`,
								},
								{
									text: `–ü–æ–º–æ—â—å‚ùî`,
									callback_data: `help`,
								},
							]);

							bot.editMessageText(
								`<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É <i>"${query}"</i></b> üòâ\n\n<a href="https://t.me/digfusionsupport">–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ</a>`,
								{
									parse_mode: "html",
									chat_id: chatId,
									message_id: usersData.find(
										(obj) => obj.chatId == chatId
									).messageId,
									disable_web_page_preview: true,
									reply_markup: {
										inline_keyboard: buttons,
									},
								}
							);
						} else {
							bot.editMessageText(
								`<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ —Ç–µ–±–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É <i>"${query}"</i> üòî</b>\n\n<blockquote><b>–°–æ–≤–µ—Ç:</b> –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –∞–≤—Ç–æ—Ä–∞.</blockquote>`,
								{
									parse_mode: "html",
									chat_id: chatId,
									message_id: usersData.find(
										(obj) => obj.chatId == chatId
									).messageId,
									disable_web_page_preview: true,
									reply_markup: {
										inline_keyboard: [
											[
												{
													text: `‚¨ÖÔ∏è–í –º–µ–Ω—é`,
													callback_data: "exit",
												},
											],
										],
									},
								}
							);
						}
					}
				}, 1000);

				break;
			case 2:
				textCropping(text, 200);
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function reader(chatId, stageNum = 1, bookData = null) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		switch (stageNum) {
			case 1:
				if (bookData) {
					await bot.editMessageText(
						`<b><i>"${bookData.title}"</i></b><blockquote>${bookData}</blockquote>\n`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{ text: `‚Ü©Ô∏è`, callback_data: "-" },
										{ text: `${0} –∏–∑ ${10}`, callback_data: "-" },
										{ text: `‚Ü™Ô∏è`, callback_data: "-" },
									],
									[
										{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "exit" },
										{ text: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã ‚öôÔ∏è", callback_data: "-" },
									],
								],
							},
						}
					);
				}
				break;
			case 2:
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function StartAll() {
	if (TOKEN == config.TOKENs[0]) {
		BotName = "digtestingbot";
	} else if (TOKEN == config.TOKENs[1]) {
		BotName = "diglibrarybot";
	}

	bot.on("message", async (message) => {
		const chatId = message.chat.id;
		const text = message.text;

		try {
			if (!usersData.find((obj) => obj.chatId === chatId)) {
				usersData.push({
					chatId: chatId,
					login: message.from.first_name,
					messageId: null,
					userAction: null,
					supportveCount: null,
				});
			}

			const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

			if (Array.from(text)[0] != "/") {
				await search(chatId, null, text);
			}

			if (dataAboutUser) {
				switch (text) {
					case "/restart":
						if (chatId == qu1z3xId || chatId == jackId) {
							menuHome(chatId);
							break;
						}
					case "/start":
						firstMeeting(chatId);
						break;
					case "/menu":
						try {
							bot.deleteMessage(chatId, dataAboutUser.messageId);
						} catch (error) {}

						await bot
							.sendMessage(chatId, "„Ö§")
							.then(
								(message) =>
									(dataAboutUser.messageId = message.message_id)
							);

						menuHome(chatId);
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "/help":
						// helpList(chatId)
						break;
					case "/settings":
						// settings(chatId)
						break;
					case "":
						break;
				}
			}
			bot.deleteMessage(chatId, message.message_id);
			if (chatId != jackId && chatId != qu1z3xId) {
				sendDataAboutText(
					dataAboutUser.login,
					message.from.username,
					chatId,
					text
				);
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	});

	bot.on("callback_query", (query) => {
		const chatId = query.message.chat.id;
		const data = query.data;
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		try {
			if (dataAboutUser) {
				switch (data) {
					case "exit":
						menuHome(chatId);
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "deleteexcess":
						try {
							bot.deleteMessage(chatId, query.message.message_id);
						} catch (error) {}
						break;
				}
			}
			if (chatId != qu1z3xId && chatId != jackId) {
				sendDataAboutButton(
					dataAboutUser.login,
					query.from.username,
					chatId,
					data
				);
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	});
}

StartAll();

// digfusion
